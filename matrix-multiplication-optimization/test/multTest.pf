#define EPS 1E-10

module multTest
    
    use mult
    use pfunit_mod
    
    implicit none

contains
    
    ! dwie macierze 1x1
    @Test 
    subroutine mm_1x1_test()
        real (kind = 8) :: m1(1,1), m2(1,1), r1(1,1), r2(1,1), r3(1,1), r4(1,1), r5(1,1), correct(1,1)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 3.d0
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine

    !macierze 1 × N oraz N × 1 (obie kombinacje)
    @Test 
    subroutine mm_Nx1_1xN_test()
        real (kind = 8) :: m1(1,100), m2(100,1), r1(1,1), r2(1,1), r3(1,1), r4(1,1), r5(1,1), correct(1,1)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 3.d0*100
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine
    
    @Test 
    subroutine mm_1xN_Nx1_test()
        real (kind = 8) :: m1(100,1), m2(1,100), r1(100,100), r2(100,100), r3(100,100), r4(100,100), r5(100,100), correct(100,100)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 3.d0
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine

    ! macierze bardzo duże
    @Test 
    subroutine mm_large1_test()
        real (kind = 8) :: m1(500,750), m2(750,1000)
        real (kind = 8) :: r1(500,1000), r2(500,1000), r3(500,1000), r4(500,1000), r5(500,1000), correct(500,1000)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 3.d0*750
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine

    @Test 
    subroutine mm_large2_test()
        real (kind = 8) :: m1(500, 450), m2(450, 2000) 
        real (kind = 8) :: r1(500, 2000), r2(500, 2000), r3(500, 2000), r4(500, 2000), r5(500, 2000), correct(500, 2000)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 3.d0*450
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine

    @Test
    subroutine mm_large3_test()
        real (kind = 8) :: m1(500,250), m2(250,1000)
        real (kind = 8) :: r1(500,1000),r2(500,1000),r3(500,1000),r4(500,1000),r5(500,1000),compare_eps(500,1000)
        integer (kind = 4) :: e1, e2, e3, e4
        compare_eps = EPS
        call RANDOM_NUMBER(m1)
        call RANDOM_NUMBER(m2)
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm1(m1, m2, r3, e3)
        call mm2(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertLessThanOrEqual(abs(r1-r2), compare_eps)
        @assertEqual(e2, 0)
        @assertLessThanOrEqual(abs(r2-r3), compare_eps)
        @assertEqual(e3, 0)
        @assertLessThanOrEqual(abs(r3-r4), compare_eps)
        @assertEqual(e4, 0)
        @assertLessThanOrEqual(abs(r4-r5), compare_eps)
    end subroutine

    @Test
    subroutine mm_large4_test()
        real (kind = 8) :: m1(1,1000), m2(1000,1)
        real (kind = 8) :: r1(1,1), r2(1,1), r3(1,1), r4(1,1), r5(1,1), compare_eps(1,1)
        integer (kind = 4) :: e1, e2, e3, e4
        compare_eps = EPS
        call RANDOM_NUMBER(m1)
        call RANDOM_NUMBER(m2)
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm1(m1, m2, r3, e3)
        call mm2(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertLessThanOrEqual(abs(r1-r2), compare_eps)
        @assertEqual(e2, 0)
        @assertLessThanOrEqual(abs(r2-r3), compare_eps)
        @assertEqual(e3, 0)
        @assertLessThanOrEqual(abs(r3-r4), compare_eps)
        @assertEqual(e4, 0)
        @assertLessThanOrEqual(abs(r4-r5), compare_eps)
    end subroutine

    @Test
    subroutine mm_large5_test()
        real (kind = 8) :: m1(1000,1000), m2(1000,1000)
        real (kind = 8) :: r1(1000,1000), r2(1000,1000), r3(1000,1000), r4(1000,1000), r5(1000,1000), compare_eps(1000,1000)
        integer (kind = 4) :: e1, e2, e3, e4
        compare_eps = EPS
        call RANDOM_NUMBER(m1)
        call RANDOM_NUMBER(m2)
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm1(m1, m2, r3, e3)
        call mm2(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertLessThanOrEqual(abs(r1-r2), compare_eps)
        @assertEqual(e2, 0)
        @assertLessThanOrEqual(abs(r2-r3), compare_eps)
        @assertEqual(e3, 0)
        @assertLessThanOrEqual(abs(r3-r4), compare_eps)
        @assertEqual(e4, 0)
        @assertLessThanOrEqual(abs(r4-r5), compare_eps)
    end subroutine

    @Test
    subroutine mm_large6_test()
        real (kind = 8) :: m1(1000,100), m2(100,500)
        real (kind = 8) :: r1(1000,500), r2(1000,500), r3(1000,500), r4(1000,500), r5(1000,500), compare_eps(1000,500)
        integer (kind = 4) :: e1, e2, e3, e4
        compare_eps = EPS
        call RANDOM_NUMBER(m1)
        call RANDOM_NUMBER(m2)
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm1(m1, m2, r3, e3)
        call mm2(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertLessThanOrEqual(abs(r1-r2), compare_eps)
        @assertEqual(e2, 0)
        @assertLessThanOrEqual(abs(r2-r3), compare_eps)
        @assertEqual(e3, 0)
        @assertLessThanOrEqual(abs(r3-r4), compare_eps)
        @assertEqual(e4, 0)
        @assertLessThanOrEqual(abs(r4-r5), compare_eps)
    end subroutine

    @Test
    subroutine mm_large7_test()
        real (kind = 8) :: m1(1000,1), m2(1,1000)
        real (kind = 8) :: r1(1000,1000), r2(1000,1000), r3(1000,1000),r4(1000,1000), r5(1000,1000)
        integer (kind = 4) :: e1, e2, e3, e4
        call RANDOM_NUMBER(m1)
        call RANDOM_NUMBER(m2)
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm1(m1, m2, r3, e3)
        call mm2(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(r1, r3)
        @assertEqual(e2, 0)
        @assertEqual(r2, r3)
        @assertEqual(e3, 0)
        @assertEqual(r3, r4)
        @assertEqual(e4, 0)
        @assertEqual(r4, r5)
    end subroutine

    @Test
    subroutine mm_large8_test()
        real (kind = 8) :: m1(1000,10), m2(10,1)
        real (kind = 8) :: r1(1000,1), r2(1000,1), r3(1000,1),r4(1000,1), r5(1000,1)
        integer (kind = 4) :: e1, e2, e3, e4
        call RANDOM_NUMBER(m1)
        call RANDOM_NUMBER(m2)
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm1(m1, m2, r3, e3)
        call mm2(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(r1, r3)
        @assertEqual(e2, 0)
        @assertEqual(r2, r3)
        @assertEqual(e3, 0)
        @assertEqual(r3, r4)
        @assertEqual(e4, 0)
        @assertEqual(r4, r5)
    end subroutine


    ! macierze, których rozmiary matematycznie nie pozwalają na poprawne pomnożenie
    @Test 
    subroutine mm_incorrect1_test()
        real (kind = 8) :: m1(2000,750), m2(500,750), r1(500,750), r2(500,750), r3(500,750), r4(500,750), correct(500,750)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 0
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        @assertEqual(e1, 1)
        @assertEqual(correct, r1)
        @assertEqual(e2, 1)
        @assertEqual(correct, r2)
        @assertEqual(e3, 1)
        @assertEqual(correct, r3)
        @assertEqual(e4, 1)
        @assertEqual(correct, r4)
    end subroutine

    @Test 
    subroutine mm_incorrect2_test()
        real (kind = 8) :: m1(100,50), m2(50,100), r1(100,50), r2(100,50), r3(100,50), r4(100,50), correct(100,50)
        integer (kind = 4) :: e1, e2, e3, e4
        m1 = 1.d0
        m2 = 3.d0
        correct = 0
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        @assertEqual(e1, 2)
        @assertEqual(correct, r1)
        @assertEqual(e2, 2)
        @assertEqual(correct, r2)
        @assertEqual(e3, 2)
        @assertEqual(correct, r3)
        @assertEqual(e4, 2)
        @assertEqual(correct, r4)
    end subroutine

    ! przypadek “standardowy” z macierzami prostokątnymi małych rozmiarów
    @Test 
    subroutine mm_standard1_test()
        real (kind = 8) :: m1(2,2), m2(2,2), r1(2,2), r2(2,2), r3(2,2), r4(2,2), r5(2,2), correct(2,2)
        integer (kind = 4) :: e1, e2, e3, e4
        m1(1,:) = [1,2]
        m1(2,:) = [3,4]
        m2(1,:) = [2,0]
        m2(2,:) = [1,2]
        correct(1,:) = [4,4]
        correct(2,:) = [10,8]
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine

    @Test 
    subroutine mm_standard2_test()
        real (kind = 8) :: m1(2,3), m2(3,2), r1(2,2), r2(2,2), r3(2,2), r4(2,2), r5(2,2), correct(2,2)
        integer (kind = 4) :: e1, e2, e3, e4
        m1(1,:) = [1,0,2]
        m1(2,:) = [-1,3,1]
        m2(1,:) = [3,1]
        m2(2,:) = [2,1]
        m2(3,:) = [1,0]
        correct(1,:) = [5,1]
        correct(2,:) = [4,2]
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine
    
    @Test
    subroutine mm_standard3_test()
        real (kind = 8) :: m1(4,3), m2(3,2), r1(4,2), r2(4,2), r3(4,2), r4(4,2), r5(4,2), correct(4,2)
        integer (kind = 4) :: e1, e2, e3, e4
        m1(1,:) = [1,2,3]
        m1(2,:) = [-1,2,3]
        m1(3,:) = [0,1,3]
        m1(4,:) = [0,4,5]
        m2(1,:) = [4,0]
        m2(2,:) = [1,2]
        m2(3,:) = [-2,3]
        correct(1,:) = [0,13]
        correct(2,:) = [-8,13]
        correct(3,:) = [-5,11]
        correct(4,:) = [-6,23]
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine

    @Test
    subroutine mm_standard4_test()
        real (kind = 8) :: m1(1,3), m2(3,4), r1(1,4), r2(1,4), r3(1,4), r4(1,4), r5(1,4), correct(1,4)
        integer (kind = 4) :: e1, e2, e3, e4
        m1(1,:) = [3,4,2]
        m2(1,:) = [13,9,7,15]
        m2(2,:) = [8,7,4,6]
        m2(3,:) = [6,4,0,3]
        correct(1,:) = [83,63,37,75]
        call mm1(m1, m2, r1, e1)
        call mm2(m1, m2, r2, e2)
        call mm3(m1, m2, r3, e3)
        call mm4(m1, m2, r4, e4)
        r5 = matmul(m1,m2)
        @assertEqual(e1, 0)
        @assertEqual(correct, r1)
        @assertEqual(e2, 0)
        @assertEqual(correct, r2)
        @assertEqual(e3, 0)
        @assertEqual(correct, r3)
        @assertEqual(e4, 0)
        @assertEqual(correct, r4)
        @assertEqual(correct, r5)
    end subroutine
end module